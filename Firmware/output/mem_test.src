       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\USERS\ADMIN\DESKTOP\ASSIGNMENT4\CACHE_CONTROLLER\FIRMWARE\SPEEDTEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; /*********************************************************************************************
; **	RS232 port addresses defined as pointers
; *********************************************************************************************/
; #define RS232_Control     (*(volatile unsigned char *)(0x00400040))
; #define RS232_Status      (*(volatile unsigned char *)(0x00400040))
; #define RS232_TxData      (*(volatile unsigned char *)(0x00400042))
; #define RS232_RxData      (*(volatile unsigned char *)(0x00400042))
; #define RS232_Baud        (*(volatile unsigned char *)(0x00400044))
; /*********************************************************************************************
; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
; **	Call this function at the start of the program before you attempt to read or write to hyperterminal
; *********************************************************************************************/
; void Init_RS232(void)
; {
_Init_RS232:
; RS232_Control = 0x15 ; //  %00010101 set up serial port to use divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
       move.b    #21,4194368
; RS232_Baud = 0x1 ;      // program serial port speed: 000 = 230 kbaud, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
       move.b    #1,4194372
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level output function to 6850 ACIA
; **  This routine provides the basic functionality to output a single character to the serial Port
; **  to allow the board to communicate with HyperTerminal Program
; **
; **  NOTE you do NOT call this function directly, instead  call the normal putchar() function
; **  which in turn calls _putch() below.
; **
; **	Other functions like puts(), printf() call putchar() so will
; **  call _putch() below so it's fully integrates into the C standard library routines
; *********************************************************************************************************/
; int _putch(int c)
; {
__putch:
       link      A6,#0
; // write the character to the RS232 port first - comment out if not wanted
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level input function to 6850 ACIA
; **  This routine provides the basic functionality to input a single character from the serial Port
; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
; **
; **  NOTE you do not call this function directly, instead you call the normal getchar() function
; **  which in turn calls _getch() below).
; **	Other functions like gets(), scanf() call getchar() so will
; **  call _getch() below so it's fully integrates into the C standard library routines
; *********************************************************************************************************/
; int _getch( void )
; {
__getch:
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       rts
; }
; int a[100][100], b[100][100], c[100][100];
; int i, j, k, sum;
; int main(void)
; {
_main:
       movem.l   A2/A3/A4/A5,-(A7)
       lea       _i.L,A2
       lea       _k.L,A3
       lea       _j.L,A4
       lea       _sum.L,A5
; Init_RS232();
       jsr       _Init_RS232
; printf("\n\nStart.....");
       pea       @speedt~1_1.L
       jsr       _printf
       addq.w    #4,A7
; for(i=0; i <50; i ++)  {
       clr.l     (A2)
main_1:
       move.l    (A2),D0
       cmp.l     #50,D0
       bge       main_3
; printf("%d ", i);
       move.l    (A2),-(A7)
       pea       @speedt~1_2.L
       jsr       _printf
       addq.w    #8,A7
; for(j=0; j < 50; j++)  {
       clr.l     (A4)
main_4:
       move.l    (A4),D0
       cmp.l     #50,D0
       bge       main_6
; sum = 0 ;
       clr.l     (A5)
; for(k=0; k <50; k++)   {
       clr.l     (A3)
main_7:
       move.l    (A3),D0
       cmp.l     #50,D0
       bge       main_9
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
; sum = sum + b[i][k] * b[k][j] + a[i][k] * c[i][j];
       move.l    (A5),D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _b.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A3),D0
       muls      #400,D0
       lea       _b.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    (A2),D1
       muls      #400,D1
       lea       _a.L,A0
       add.l     D1,A0
       move.l    (A3),D1
       lsl.l     #2,D1
       move.l    D0,-(A7)
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A1
       add.l     D0,A1
       move.l    (A7)+,D0
       move.l    D0,-(A7)
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    0(A0,D1.L),-(A7)
       move.l    0(A1,D0.L),-(A7)
       jsr       LMUL
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    (A7)+,D0
       add.l     D1,D0
       move.l    D0,(A5)
       addq.l    #1,(A3)
       bra       main_7
main_9:
; }
; c[i][j] = sum ;
       move.l    (A2),D0
       muls      #400,D0
       lea       _c.L,A0
       add.l     D0,A0
       move.l    (A4),D0
       lsl.l     #2,D0
       move.l    (A5),0(A0,D0.L)
       addq.l    #1,(A4)
       bra       main_4
main_6:
       addq.l    #1,(A2)
       bra       main_1
main_3:
; }
; }
; printf("\n\nDone.....");
       pea       @speedt~1_3.L
       jsr       _printf
       addq.w    #4,A7
; return 0 ;
       clr.l     D0
       movem.l   (A7)+,A2/A3/A4/A5
       rts
; }
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_printf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doprint
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doprint_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @doprint_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @doprint_copy_2
@doprint_copy_1:
       move.l    12(A6),-(A7)
       jsr       _putch
       addq.w    #4,A7
@doprint_copy_2:
       unlk      A6
       rts
@doprint_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D3
       clr.l     D2
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D0
       cmp.b     #42,D0
       bne.s     @doprint_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D2
       move.l    D3,A0
       addq.l    #1,(A0)
       bra       @doprint_getval_5
@doprint_getval_1:
       moveq     #1,D0
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     @doprint_getval_5
       move.l    D2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D2
       bra       @doprint_getval_1
@doprint_getval_5:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_doprint:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @doprint_copy.L,A3
       lea       _ultoa.L,A4
       clr.l     D6
doprint_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       doprint_3
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #37,D0
       beq.s     doprint_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_2
doprint_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
doprint_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     doprint_12
       bgt.s     doprint_15
       cmp.l     #35,D0
       beq       doprint_14
       bgt       doprint_9
       cmp.l     #32,D0
       beq.s     doprint_13
       bra.s     doprint_9
doprint_15:
       cmp.l     #45,D0
       beq.s     doprint_11
       bra.s     doprint_9
doprint_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_9:
       bra.s     doprint_8
doprint_7:
       bra       doprint_6
doprint_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #48,D0
       bne.s     doprint_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
doprint_16:
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #46,D0
       bne.s     doprint_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,D5
doprint_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #108,D0
       bne.s     doprint_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
doprint_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       doprint_27
       bgt.s     doprint_33
       cmp.l     #100,D0
       beq       doprint_24
       bgt.s     doprint_34
       cmp.l     #99,D0
       beq       doprint_30
       bgt       doprint_22
       cmp.l     #88,D0
       beq       doprint_28
       bra       doprint_22
doprint_34:
       cmp.l     #105,D0
       beq.s     doprint_24
       bra       doprint_22
doprint_33:
       cmp.l     #117,D0
       beq       doprint_26
       bgt.s     doprint_35
       cmp.l     #115,D0
       beq       doprint_31
       bra       doprint_22
doprint_35:
       cmp.l     #120,D0
       beq       doprint_28
       bra       doprint_22
doprint_24:
       tst.b     -45(A6)
       beq.s     doprint_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       bra.s     doprint_37
doprint_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
doprint_37:
       bra       doprint_23
doprint_26:
       tst.b     -45(A6)
       beq.s     doprint_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_39
doprint_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_39:
       bra       doprint_23
doprint_27:
       tst.b     -45(A6)
       beq.s     doprint_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_41
doprint_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_41:
       bra       doprint_23
doprint_28:
       tst.b     -45(A6)
       beq.s     doprint_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_43
doprint_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_43:
       bra       doprint_23
doprint_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     doprint_44
       move.l    A5,D0
       bra.s     doprint_45
doprint_44:
       moveq     #1,D0
       ext.w     D0
       ext.l     D0
doprint_45:
       move.l    D0,D5
       bra       doprint_23
doprint_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     doprint_46
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
doprint_46:
       bra.s     doprint_23
doprint_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
doprint_23:
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #115,D0
       bne.s     doprint_48
       cmp.l     #0,D5
       blt.s     doprint_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     doprint_50
       move.l    D5,D0
       bra.s     doprint_51
doprint_50:
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
doprint_51:
       move.b    D0,D4
doprint_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne       doprint_56
       lea       -36(A6),A0
       move.l    A0,D2
doprint_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       doprint_54
doprint_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #100,D0
       beq.s     doprint_59
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #105,D0
       bne       doprint_65
doprint_59:
       move.b    -50(A6),D0
       ext.w     D0
       ext.l     D0
       tst.l     D0
       bne.s     doprint_62
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne       doprint_60
doprint_62:
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_64
doprint_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
doprint_64:
       addq.l    #1,D7
       bra       doprint_65
doprint_60:
       tst.b     -49(A6)
       beq.s     doprint_65
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_68
doprint_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
doprint_68:
       addq.l    #1,D7
doprint_65:
       tst.b     -48(A6)
       beq       doprint_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     doprint_73
       bgt.s     doprint_76
       cmp.l     #88,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_76:
       cmp.l     #120,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #120,D0
       beq.s     doprint_79
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne.s     doprint_77
doprint_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
doprint_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       doprint_82
       bgt.s     doprint_93
       cmp.l     #99,D0
       beq       doprint_96
       bgt.s     doprint_94
       cmp.l     #88,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #69,D0
       beq       doprint_82
       bra       doprint_80
doprint_94:
       cmp.l     #101,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #100,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_93:
       cmp.l     #117,D0
       beq.s     doprint_82
       bgt.s     doprint_95
       cmp.l     #115,D0
       beq       doprint_96
       bgt       doprint_80
       cmp.l     #111,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_95:
       cmp.l     #120,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_82:
       tst.b     -46(A6)
       beq.s     doprint_96
       tst.b     -51(A6)
       bne.s     doprint_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
doprint_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     doprint_98
       clr.l     -4(A6)
doprint_98:
       tst.b     -51(A6)
       bne       doprint_104
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_102
doprint_104:
       lea       -44(A6),A0
       move.l    A0,D2
doprint_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_105
doprint_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
doprint_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     doprint_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_108
doprint_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       doprint_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     doprint_116
       bgt.s     doprint_119
       cmp.l     #99,D0
       beq.s     doprint_116
       bra.s     doprint_119
doprint_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     doprint_119
       bra.s     doprint_115
doprint_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     doprint_112
doprint_115:
       bra.s     doprint_113
doprint_112:
       bra       doprint_110
doprint_113:
       tst.b     -51(A6)
       beq       doprint_125
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       doprint_123
doprint_125:
       bra.s     doprint_81
doprint_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
doprint_81:
       addq.l    #1,12(A6)
doprint_2:
       bra       doprint_1
doprint_3:
       tst.l     (A2)
       beq.s     doprint_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
doprint_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       moveq     #48,D1
       and.l     #255,D1
       add.l     D1,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       moveq     #97,D1
       and.l     #255,D1
       add.l     D1,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1.L
       move.l    D3,-(A7)
       jsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_putch:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       jsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       jsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_toupper:
       move.l    4(A7),D0
       cmp.l     #'a',D0
       blt.s     toupper_1
       cmp.l     #'z',D0
       bgt.s     toupper_1
       sub.l     #$20,D0
toupper_1:
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne.s     strcpy_1
       rts
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
       section   const
                align


@speedt~1_1:
       dc.b      10,10,83,116,97,114,116,46,46,46,46,46,0
@speedt~1_2:
       dc.b      37,100,32,0
@speedt~1_3:
       dc.b      10,10,68,111,110,101,46,46,46,46,46,0
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
__ctype:
       dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
       dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
       dc.b      64,64,64,208,160,160,160,160,160,160,160,160
       dc.b      160,160,160,160,160,160,160,140,140,140,140
       dc.b      140,140,140,140,140,140,160,160,160,160,160
       dc.b      160,160,138,138,138,138,138,138,130,130,130
       dc.b      130,130,130,130,130,130,130,130,130,130,130
       dc.b      130,130,130,130,130,130,160,160,160,160,160
       dc.b      160,137,137,137,137,137,137,129,129,129,129
       dc.b      129,129,129,129,129,129,129,129,129,129,129
       dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

_a:
       ds.b      40000
_b:
       ds.b      40000
_c:
       ds.b      40000
_i:
       ds.b      4
_j:
       ds.b      4
_k:
       ds.b      4
_sum:
       ds.b      4
       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
